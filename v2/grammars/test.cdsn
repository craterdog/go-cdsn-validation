
!>
    TOKEN DEFINITIONS
    The following token definitions are used by the scanner to generate the stream of tokens that
    are processed by the parser.  Each token name begins with an upper case letter.  Unlike with
    rule definitions, a token definition cannot specify the name of a rule but can specify the
    name of another token.  Token definitions cannot be recursive and the scanning of tokens is
    not greedy.  Whitespace within a token definition is not ignored.

    The following intrinsic token types are environment or language specific:
     * ANY - any language specific character
     * LOWER_CASE - any language specific lower case character
     * UPPER_CASE - any language specific upper case character
     * DIGIT - any language specific digit
     * ESCAPE - any environment specific escape sequence
     * CONTROL - any environment specific (non-printable) control character
     * EOF - the environment specific end-of-file marker

    Inversion within a token definition may only be applied to a token predicate resulting in a
    single character.  Token inversions cannot be nested.  The following token types are scanned for
    in the order listed below.
<!

$CHARACTER: "'" ~CONTROL "'"  ! Any printable character.

$TEXT: '"' (ESCAPE | ~('"' | CONTROL))+ '"'

$INTEGER:
      '0'
    | '-'? '1'..'9' DIGIT*


!>
    RULE DEFINITIONS
    The following rules are used by the parser when parsing the stream of tokens generated by the
    scanner.  Each rule name begins with a lower case letter.  The rule definitions may specify the
    names of tokens or other rules and are matched by the parser in the order listed.  A rule
    definition may also be directly or indirectly recursive.  The sequence of factors within
    in a rule definition may be separated by whitespace which is ignored by the parser.

    A predicate within a factor may also be constrained by any of the following cardinalities:
     * predicate{M} - Exactly M instances of the specified predicate.
     * predicate{M..} - M or more instances of the specified predicate.
     * predicate{M..N} - M to N instances of the specified predicate.
     * predicate? - Zero or one instances of the specified predicate (equivalent to predicate{0..1}).
     * predicate* - Zero or more instances of the specified predicate (equivalent to predicate{0..}).
     * predicate+ - One or more instances of the specified predicate (equivalent to predicate{1..}).

    Inversion within a rule definition may only be applied to a token predicate resulting in a
    single token.  Rule inversions cannot be nested.  The following rules are attempted in the order
    listed below.
<!

$document: component EOF  ! Terminated with an end-of-file marker.

$component: primitive | list

$primitive: CHARACTER | TEXT | INTEGER

$list: "[" component (',' component)* "]"

