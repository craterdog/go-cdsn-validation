
!>
    CRATER DOG SYNTAX NOTATION
    This document contains a formal definition of the Crater Dog Syntax Notationâ„¢ (CDSN) language
    grammar using CDSN itself in homage to Douglas Hofstadter.  A language grammar consists of a
    set of rule definitions and token definitions.
<!


!>
    RULE DEFINITIONS
    The following rules are used by the parser when parsing the stream of tokens generated by the
    scanner.  Each rule name begins with a lowercase letter.  The rule definitions may specify the
    names of tokens or other rules and are matched by the parser in the order listed.  Rule
    definitions may be recursive.  The sequence of factors within in a rule definition may be
    separated by whitespace which is ignored by the parser.
<!

$grammar: <statement> EOF  ! Terminated with an end-of-file marker.

$statement: COMMENT | definition

$definition: SYMBOL ":" expression  ! This works for both tokens and rules.

$expression: alternative {"|" alternative}

$alternative: <factor> [NOTE]

$factor: element | range | inverse | grouping

$element: INTRINSIC | STRING | NUMBER | NAME

$range: CHARACTER [".." CHARACTER]  ! A range of CHARACTERs is inclusive.

$inverse: "~" factor

$grouping: exactlyN | zeroOrOne | zeroOrMore | oneOrMore

$exactlyN: "(" expression ")" [NUMBER]  ! The default is exactly one.

$zeroOrOne: "[" expression "]"

$zeroOrMore: "{" expression "}"

$oneOrMore: "<" expression ">"


!>
    TOKEN DEFINITIONS
    The following token definitions are used by the scanner to generate the stream of tokens that
    are processed by the parser.  Each token name begins with an uppercase letter.  Unlike with
    rule definitions, a token definition cannot specify the name of a rule but can specify the
    name of another token.  Token definitions cannot be recursive and the scanning of tokens is
    not greedy.  Whitespace within a token definition is not ignored.  INTRINSIC tokens are
    environment/language specific, and are not defined in this specification.  INTRINSICs are
    scanned for before any other token type to avoid name conflicts.  The token types are scanned
    for in the order listed in the specification.
<!

$INTRINSIC: "ANY" | "LOWERCASE" | "UPPERCASE" | "DIGIT" | "SEPARATOR" | "ESCAPE" | "EOL" | "EOF"

$NOTE: "! " {~EOL}

$COMMENT: "!>" {ANY} "<!"

$CHARACTER: "'" ~EOL "'"

$STRING: '"' <ESCAPE | ~('"' | EOL)> '"'

$NUMBER: <DIGIT>

$NAME: LOWERCASE | UPPERCASE {[SEPARATOR] (LOWERCASE | UPPERCASE | DIGIT)}

$SYMBOL: "$" NAME

