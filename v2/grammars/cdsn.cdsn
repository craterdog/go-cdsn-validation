
!>
    A formal definition of Crater Dog Syntax Notation™ (CDSN) using Crater Dog
    Syntax Notation™ itself.  This language grammar consists of rule definitions
    and token definitions.

    Each rulename begins with a lowercase letter.  The rules are applied in the
    order listed. So—for example—within a factor, a range of RUNEs takes
    precedence over an individual RUNE.

    Each tokenname begins with an uppercase letter.  The INTRINSIC tokens are
    environment and language specific, and are therefore left undefined. The
    tokens are also scanned in the order listed.  So an INTRINSIC token takes
    precedence over an IDENTIFIER token.
<!


! *** Rulenames Begin with a Lowercase Letter ***

$grammar: <statement> EOF  ! Terminated with an end-of-file marker.

$statement: (annotation | production)

$annotation: NOTE | COMMENT

$production: SYMBOL ":" definition  ! This works for both tokens and rules.

$definition: alternative {"|" alternative}

$alternative: <factor> [NOTE]

$factor:
      inverse
    | exactlyN
    | zeroOrOne
    | zeroOrMore
    | oneOrMore
    | range  ! Ranges must be parsed before RUNEs.
    | RUNE
    | STRING
    | NUMBER
    | RULENAME
    | TOKENNAME
    | INTRINSIC

$inverse: "~" factor

$exactlyN: "(" definition ")" [NUMBER]  ! The default is exactly one.

$zeroOrOne: "[" definition "]"

$zeroOrMore: "{" definition "}"

$oneOrMore: "<" definition ">"

$range: RUNE ".." RUNE  ! A range includes the first and last RUNEs listed.


! *** Tokennames Begin with an Uppercase Letter ***

$INTRINSIC: "LOWERCASE" | "UPPERCASE" | "DIGIT" | "EOL" | "EOF"

$NOTE: "! " {~EOL}

$COMMENT: "!>" EOL {COMMENT | ~"<!"} EOL "<!"

$RUNE: "'" ~"'" "'"

$STRING: '"' <~'"'> '"'

$NUMBER: <DIGIT>

$SYMBOL: "$" LETTER {CHARACTER}

$LETTER: LOWERCASE | UPPERCASE

$CHARACTER: LETTER | DIGIT

$RULENAME: LOWERCASE {CHARACTER}

$TOKENNAME: UPPERCASE {CHARACTER}  ! TOKENNAMEs must be scanned after INTRINSICs.

$DELIMITER: "~" | ":" | "|" | "(" | ")" | "[" | "]" | "{" | "}" | "<" | ">" | ".."

