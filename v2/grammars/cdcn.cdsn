
!>
    A formal definition of a collection using Crater Dog Syntax Notationâ„¢.
    Token names are identified by all CAPITAL letters and rule names are
    identified by lowerCamelCase letters.

    The INTRINSIC tokens are environment dependent and therefore left undefined.
    The tokens are scanned in the order listed so an INTRINSIC token takes
    precedence over an IDENTIFIER token.

    The rules are applied in the order listed as well, so within a factor a
    range takes precedence over an individual CHARACTER.  The starting rule is
    the "$source" rule.
<!

$BASE10: '0'..'9'

$BASE16: '0'..'9' | 'a'..'f'

$BOOLEAN: "false" | "true"

$COMPLEX: "(" FLOAT SIGN FLOAT "i)"

$CONTEXT: "array" | "catalog" | "list" | "map" | "queue" | "set" | "stack"

$DELIMITER: "]" | "[" | ")" | "(" | ":" | ","

$EOL: "\n"

$ESCAPE: '\' (UNICODE | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '"' | "'" | '\')

$EXPONENT: ("e" | "E") SIGN ORDINAL

$FLOAT: [SIGN] SCALAR [EXPONENT]

$FRACTION: "." <BASE10>

$INTEGER: ZERO | [SIGN] ORDINAL

$NIL: "nil"

$ORDINAL: '1'..'9' {'0'..'9'}

$RUNE: "'" (ESCAPE | ~("'" | EOL)) "'"

$SCALAR: (ZERO | ORDINAL) FRACTION

$SIGN: "+" | "-"

$STRING: '"' {ESCAPE | ~('"' | EOL)} '"'

$UNICODE: "u" (BASE16)4 | "U" (BASE16)8

$UNSIGNED: "0x" <BASE16>

$ZERO: "0"

$association: key ":" value

$associations:
      association {"," association}
    | EOL <association EOL>
    | ":"  ! No associations.

$collection: "[" (values | associations) "]" "(" CONTEXT ")"

$key: primitive

$primitive: BOOLEAN | COMPLEX | FLOAT | INTEGER | NIL | RUNE | STRING

$source: collection EOF  ! EOF is the end-of-file marker.

$value: primitive | collection

$values:
      value {"," value}
    | EOL <value EOL>
    | " "  ! No values.

