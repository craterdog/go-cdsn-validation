
!>
    TOKEN DEFINITIONS
    The following token definitions are used by the scanner to generate the stream of tokens that
    are processed by the parser.  Each token name begins with an upper case letter.  Unlike with
    rule definitions, a token definition cannot specify the name of a rule but can specify the
    name of another token.  Token definitions cannot be recursive and the scanning of tokens is
    not greedy.  Whitespace within a token definition is not ignored.  The following intrinsic
    token types are environment/language specific:
     * ANY - any character
     * LOWER_CASE - any language specific lower case character
     * UPPER_CASE - any language specific upper case character
     * DIGIT - any language specific digit
     * SEPARATOR - any language specific character separator
     * ESCAPE - any environment specific escape sequence
     * EOL - the environment specific end-of-line sequence
     * EOF - the environment specific end-of-file marker
    The following token types are scanned for in the order listed below.
<!

$TEXT: '"' (ESCAPE | ~('"' | EOL))+ '"'

$INTEGER: '0' | '-'? '1'..'9' DIGIT*


!>
    RULE DEFINITIONS
    The following rules are used by the parser when parsing the stream of tokens generated by the
    scanner.  Each rule name begins with a lower case letter.  The rule definitions may specify the
    names of tokens or other rules and are matched by the parser in the order listed.  Rule
    definitions may be recursive.  The sequence of predicates within in a rule definition may be
    separated by whitespace which is ignored by the parser.  The expressions within a precedence
    may be limited by one of the following constraints:
     * (expression)? - Zero or one instances of the specified expression.
     * (expression)* - Zero or more instances of the specified expression.
     * (expression)+ - One or more instances of the specified expression.
     * (expression)N - Exactly N instances of the specified expression.
     * (expression)M..N - M to N instances of the specified expression.
    The following rules are attempted in the order listed below.
<!

$document: component EOF  ! Terminated with an end-of-file marker.

$component: primitive | list

$primitive: TEXT | INTEGER

$list: "[" component* "]"

